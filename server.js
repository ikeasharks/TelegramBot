const TelegramBot = require('node-telegram-bot-api')
const connection = require('./database.js')
const express = require('express')
const fs = require('fs')
const cors = require('cors')

const app = express()

require("dotenv").config()

//const site = fetch("https://lighthearted-selkie-d27699.netlify.app/").then(res => console.log(res))

const getData = async ()=>{
    try{
        const response = await fetch('https://lighthearted-selkie-d27699.netlify.app/', {
            method: 'GET',
            headers: {'Content-Type': 'text/html'}
        })
        const data = await response.text()
        console.log(data)  
    }catch(err){
        console.log(err)
    }
    
}
//getData()

const data = {
    name: 'test',
    age: 25
}
console.log(data + " –ø—Ä–æ—Å—Ç–æ json")
const strData = JSON.stringify(data)
const parseJson = JSON.parse(strData)
console.log(parseJson)

app.use(cors({
    origin: '*',
    optionsSuccessStatus: 200,
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization']
  }))

app.post('/', (req, res) => {
    
    const data = res.body
    const dataStr = JSON.stringify(data)
    const dataParse = JSON.parse(dataStr)
    
    console.log(dataParse)
    console.log('Hello Node')
    res.send('Hello Node')
});

// app.get('/', (req, res) => {
//     fs.readFile('./public/index.html', {encoding: 'utf-8', flag: 'r'}, (err, data) => {
//         if(err) throw err
        
//     })

//     res.sendFile(__dirname+'/public/index.html');
// })


const PORT = process.env.PORT || 3000

app.listen(PORT, () => {
    console.log(`Example app listening on http://localhost:${PORT}`)
})



const bot = new TelegramBot(process.env.API_KEY, {polling:{
    interval: 300,
    autoStart: true
}})

const userId = function(user_id){
    return `SELECT user_id FROM users WHERE user_id = ${user_id}`
}

//const resultData = []

bot.on("text", async msg => {
    if(msg.text.startsWith("/start")) {
        try{
            await bot.sendMessage(msg.chat.id, "–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!üëãüèª")
            connection.connect(function(err){
                if(err){
                    console.log(err)
                }else{
                    connection.query(`SELECT user_id FROM users`, (err, result) => {
                        if(err){
                            console.log(err)
                        } else{
                            console.log(msg.from.id + ' –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                            console.log(result[0].user_id + ' –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –∏–∑ –±–∞–∑—ã')
                            
                            if(result[0].user_id == msg.from.id){
                                console.log('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –∏ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∏–Ω—Ñ—É –æ –Ω–µ–º')
                                try{
                                    const mainKeyboard = {
                                        reply_markup: JSON.stringify({
                                            one_time_keyboard: true,
                                            resize_keyboard: true,
                                            inline_keyboard: [
                                                    [{text: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'}, {text: '–ë–∞–ª–∞–Ω—Å', callback_data: '–ë–∞–ª–∞–Ω—Å'}],
                                                    [{text: '–ê—Ñ–∏—à–∞', callback_data: '–ê—Ñ–∏—à–∞'}, {text: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', callback_data: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã'}]
                                                ]
                                        })
                                    }
                                    bot.sendMessage(msg.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainKeyboard)
                                }catch(error){
                                    console.log(error)
                                } 
                            }else{
                                console.log('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –µ–º—É –Ω–∞–¥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')
                                const authKeyboard = {
                                    reply_markup: JSON.stringify({
                                        one_time_keyboard: true,
                                        resize_keyboard: true,
                                        keyboard: [
                                            [{text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true}]
                                        ]
                                    })
                                }
                            bot.sendMessage(msg.chat.id, '–í–∞–º –Ω–∞–¥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º', authKeyboard )
                        }  
                    }
                })
            }
            })

            if(msg.text.length > 6){
                const refId = msg.text.slice(7)
                await bot.sendMessage(msg.chat.id, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refId}`)
            }
            
        }catch(error){
            console.log(error)
        }
    }
    else if (msg.text === "/ref"){
        try{
            await bot.sendMessage(msg.chat.id, `${process.env.URL_TO_BOT}?start=${msg.from.id}`);
        }catch(error){
            console.log(error)
        }
    }
    else if(msg.text === '/help') {
        await bot.sendMessage(msg.chat.id, '–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ Markdown\n\n*–ñ–∏—Ä–Ω—ã–π –¢–µ–∫—Å—Ç*\n_–¢–µ–∫—Å—Ç –ö—É—Ä—Å–∏–≤–æ–º_\n`–¢–µ–∫—Å—Ç —Å –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º`\n~–ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~\n``` –∫–æ–¥ ```\n||—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç||\n[–ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞](t.me)', {
            
            parse_mode: "MarkdownV2"
            
        });
    }
    else if(msg.text === '/pay'){
        
        const chatId = msg.chat.id;
        const title = '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞';
        const description = '–û–ø–∏—Å–∞–Ω–∏–µ —Å—á–µ—Ç–∞';
        const payload = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ';
        const providerToken = process.env.PROVIDER_TOKEN;
        const currency = 'RUB';
        const prices = [{ label: '–¢–æ–≤–∞—Ä', amount: 10000 }];

        bot.sendInvoice(chatId, title, description, payload, providerToken, currency, prices)
        .then((sentInvoice) => {
            console.log('–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', sentInvoice);
        })
        .catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞:', error);
        });
    }else if(msg.text === '/site'){
        bot.sendMessage(msg.chat.id, '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç',{
            reply_markup: JSON.stringify({
                keyboard: [[
                    {text: '–ö–ª–∏–∫–∞–π', web_app: {url: 'https://lighthearted-selkie-d27699.netlify.app/'}}
                ]]
            })
        })
        bot.sendMessage(msg.chat.id, '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç',{
            reply_markup: JSON.stringify({
                inline_keyboard: [[
                    {text: '–ö–ª–∏–∫–∞–π', web_app: {url: 'https://lighthearted-selkie-d27699.netlify.app/'}}
                ]]
            })
        })
    }
    else{
        console.log(msg.text)
        
    }
})



bot.on('web_app_data', (msg) => {
    const data = msg.web_app_data.data
    console.log(data)
    bot.sendMessage(msg.chat.id, `–í–∞—à –Ω–∏–∫: ${data}`)
    bot.answerWebAppQuery(msg.id, { type: 'text', text: '–í–∞—à –Ω–∏–∫: ' + data })
})

bot.on('pre_checkout_query', (query)=> {
    bot.answerPreCheckoutQuery(query.id, true)
})

bot.on('successful_payment', (msg) => {
    bot.sendMessage(msg.chat.id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
})

bot.on('callback_query', async msg => {
    if(msg.data == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'){
        try{
            connection.query(`SELECT * FROM users WHERE user_id = ${msg.from.id}`, (err, result) => {

                if(err){
                    console.log(err)
                }else{
                    console.log(result[0].id + ' –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–±—ç–∫–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

                    const sql = `SELECT * FROM profile WHERE userId = '${result[0].id}'`
                    connection.query(sql, (err, result) => {
                        if(err){
                            console.log(err)
                        }else{
                            console.log(result[0])
                            if(result[0] === undefined){
                                console.log('–ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ')
                            }
                            else{
                                let str = result[0].birthday.toString()
                                let date = new Date(str)
                                bot.editMessageText(`–ò–º—è: ${result[0].name}, –í–æ–∑—Ä–∞—Å—Ç: ${result[0].age}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${date.toLocaleDateString('ru')}`, { chat_id: msg.message.chat.id, message_id: msg.message.message_id, reply_markup: {
                                    inline_keyboard: [
                                        [{text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}, {text: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"}],
                                        [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ | –º–µ–Ω—é'}]
                                    ]
                                }})
                            }
                            
                        }})
                }
            })

        }catch(error){
            console.log(error)
        }
    }

    if(msg.data == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'){
        const namePromt = await bot.sendMessage(msg.message.chat.id, "–í–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", {
            reply_markup: {
                force_reply: true
                }
            })
        bot.onReplyToMessage(msg.message.chat.id, namePromt.message_id, async msg => {
            const login = msg.from.id
            const name = msg.text
            var log
            connection.query(`SELECT * FROM users WHERE user_id = ${login}`, (err, result) => {
                if(err){
                    console.log(err)
                }else{
                    log = result[0].id
                    console.log(log)
                }
            })
            const agePromt = await bot.sendMessage(msg.chat.id, '–í–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:',{
                reply_markup: {
                    force_reply: true
                }
            })
            bot.onReplyToMessage(msg.chat.id, agePromt.message_id, async msg => {
                const age = msg.text
                const birthdayPromt = await bot.sendMessage(msg.chat.id, '–í–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:',{
                    reply_markup: {
                        force_reply: true
                    }
                })
                bot.onReplyToMessage(msg.chat.id, birthdayPromt.message_id, async msg => {
                    const birthday = msg.text
                    const sql = `SELECT * FROM profile WHERE userId = ${log}`
                    connection.query(sql, (err, result) => {
                        if(err){
                            console.log(err)
                        }else{
                            if(log == result[0].userId){
                                const sql = `UPDATE profile SET name = '${name}', age = '${age}', birthday = '${birthday}' WHERE userId = ${log}` 
                                connection.query(sql, (err, result) => {
                                    if(err){
                                        console.log(err)
                                    }else{
                                        console.log(result)
                                    }
                                })
                            }else if(log == undefined){
                                const insert = `INSERT INTO profile (profile.name,  profile.age, profile.birthday, profile.userId) VALUES ('${name}','${age}','${birthday}', ${log})`
                                connection.query(insert, (err, res) => {
                                    if(err){
                                        console.log(err)
                                    }else{
                                        console.log(res)
                                    }
                                })
                            }
                        }
                    })
                })
            }) 
        })
    }

    if(msg.data == '–ë–∞–ª–∞–Ω—Å'){
        const messageId = msg.message.message_id;
        bot.editMessageText('–ë–∞–ª–∞–Ω—Å', {chat_id: msg.message.chat.id, message_id: messageId, reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            inline_keyboard: [[{text: "–ù–∞–∑–∞–¥", callback_data: "–ù–∞–∑–∞–¥ | –±–∞–ª–∞–Ω—Å"}]]
        })}
    )
    }

    if(msg.data == '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'){
        bot.editMessageText(`–†–µ—Ñ–µ—Ä–∞–ª—ã: —Å–∫–æ–ª—å–∫–æ-—Ç–æ\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n ${process.env.URL_TO_BOT}?start=${msg.from.id}`, {
            chat_id: msg.message.chat.id, 
            message_id: msg.message.message_id, 
            reply_markup: JSON.stringify({
                    inline_keyboard: 
                    [
                        [{text: "–ù–∞–∑–∞–¥", callback_data: "–ù–∞–∑–∞–¥ | —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞"}]
                    ]
                }
            )})
    }

    if(msg.data == '–ù–∞–∑–∞–¥ | –±–∞–ª–∞–Ω—Å'){
        try{
            const messageId = msg.message.message_id;
            bot.editMessageText('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', {chat_id: msg.message.chat.id, message_id: messageId, reply_markup: JSON.stringify({
                one_time_keyboard: true,
                resize_keyboard: true,
                inline_keyboard: [
                        [{text: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'}, {text: '–ë–∞–ª–∞–Ω—Å', callback_data: '–ë–∞–ª–∞–Ω—Å'}],
                        [{text: '–ê—Ñ–∏—à–∞', callback_data: '–ê—Ñ–∏—à–∞'}, {text: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', callback_data: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã'}]
                    ]
            })});
        }catch(err){
            console.log(err)
        }
    }else if(msg.data == '–ù–∞–∑–∞–¥ | –º–µ–Ω—é'){
        try{
            const messageId = msg.message.message_id;
            bot.editMessageText('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', {chat_id: msg.message.chat.id, message_id: messageId, reply_markup: JSON.stringify({
                one_time_keyboard: true,
                resize_keyboard: true,
                inline_keyboard: [
                        [{text: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'}, {text: '–ë–∞–ª–∞–Ω—Å', callback_data: '–ë–∞–ª–∞–Ω—Å'}],
                        [{text: '–ê—Ñ–∏—à–∞', callback_data: '–ê—Ñ–∏—à–∞'}, {text: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', callback_data: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã'}]
                    ]
            })});
        }catch(err){
            console.log(err)
        }
    }else if(msg.data == '–ù–∞–∑–∞–¥ | —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞'){
        try{
            const messageId = msg.message.message_id;
            connection.query(`SELECT * FROM users WHERE user_id = ${msg.from.id}`, (err, result) => {
                var id
                if(err){
                    console.log(err)
                }else{
                    id = result[0].id
                    console.log(id)
                }
                const sql = `SELECT * FROM profile WHERE userId = '${id}'`
                connection.query(sql, (err, result) => {
                    if(err){
                        console.log(err)
                    }else{
                        if(result[0].name == undefined || result[0].age == undefined|| result[0].birthday == undefined){
                            console.log('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ, –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç')
                        }else{
                            let str = result[0].birthday.toString()
                            let date = new Date(str)
                            bot.editMessageText(`–ò–º—è: ${result[0].name}, –í–æ–∑—Ä–∞—Å—Ç: ${result[0].age}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${date.toLocaleDateString('ru')}`, {chat_id: msg.message.chat.id, message_id: messageId, reply_markup: JSON.stringify({
                                one_time_keyboard: true,
                                resize_keyboard: true,
                                inline_keyboard: [
                                        [{text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}, {text: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'}],
                                        [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ | –º–µ–Ω—é'}]
                                    ]
                                })})
                        }
                    }

            })
        })
        }catch(err){
            console.log(err)
        }
    }
})
            

bot.on('contact', async contact => {
    try {
        const id = connection.query(userId(contact.from.id))
        if(id.options.values == undefined){
            const sql = `INSERT INTO users (number,first_name,user_id) VALUES (${contact.contact.phone_number},'${contact.contact.first_name}',${contact.contact.user_id})`
            connection.query(sql, (err, result) => {
                if(err){
                    console.log(err)
                }else{
                    console.log(result)
                }
            })
        }else{
            bot.sendMessage(contact.chat.id, '–í–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.')
        }
    }catch(error){
        console.log(error)
    }
})

// bot.on('web_app_data', async webMsg => {
//     console.log(webMsg)
//     console.log(webMsg.web_app_data.data + ' —Ç–æ —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ –±–æ—Ç–∞')
// })

const commands = [
    {
        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    },
    {
        command: "ref",
        description: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
    },
    {
        command: "help",
        description: "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏"
    }
]

bot.setMyCommands(commands)

// bot.on("text", async msg => {
//     if(msg.text == '/id' && authenticate_users(msg.from.id)){
//         bot.sendMessage(msg.chat.id, 'Your ID: ' + msg.from.id, keyboard)    
//     } else {
//         bot.sendMessage(msg.chat.id, 'Unauthorized User', keyboard)    
//     }
// })


// }else if(msg.text == "/contact"){
    //     if(msg.contact.user_id == msg.from.id){
        
        //     }
        
        // bot.on("text", async msg => {
            //     try {
                //         const msgWaitAsync = await bot.sendMessage(msg.chat.id, "–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...")
                //         setTimeout(async ()=> {
                    //             bot.deleteMessage(msgWaitAsync.chat.id, msgWaitAsync.message_id)
                    //             bot.sendMessage(msg.chat.id, msg.text)
                    
                    //         }, 5000)
//     }
//     catch(error){
//         console.log(error)
//     }
// })

// bot.on("text", async msg => {

// })
